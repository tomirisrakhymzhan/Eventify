{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/options/categoryOptions.ts","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetaledHeader.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","window","location","href","modalStateErrors","key","push","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityMap","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","preventDefault","handleFollow","Card","Header","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","categoryOptions","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","navigate","useNavigate","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","l","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","verticalAlign","relaxed","divided","ribbon","Extra","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","Tab","Pane","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","setEditMode","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","menuPosition","Statistic","Divider","PrivateRoute","redirectPath","children","replace","useLocation","renderActivityForm","finally","hideProgressBar","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.f80d8d60.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize;\n\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n    if(process.env.NODE_ENV === \"development\") await sleep(1000);\n    \n    const pagination = response.headers['pagination'];\n    if (pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>\n    }\n    return response;\n}, (error: AxiosError) => {\n    const {data, status, config} = error.response!;\n    switch (status) {\n        case 400:\n            if(typeof data == 'string') {\n                toast.error(data);\n            }\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                window.location.href = \"/not-found\";\n            }\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat();\n            } else {\n                toast.error(data);\n            }\n            toast.error(\"400 bad request\")\n            break;\n        case 401:\n            toast.error('unauthorised');\n            break;\n        case 404:\n            window.location.href = \"/not-found\";\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            window.location.href = \"/server-error\";\n            //toast.error(\"500 server error\")\n            break;\n    }\n    return Promise.reject(error);\n})\n\n\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\n        .then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\n}\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: {'Content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) => \n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) =>\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`),\n}\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n\n}\n\nexport default agent;","import { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[]\n}\n\nexport class Activity implements Activity {\n  constructor(init?: ActivityFormValues) {\n    Object.assign(this, init);\n  }\n}\n\nexport class ActivityFormValues {\n  id?: string = undefined;\n  title: string = '';\n  category: string = '';\n  description: string = '';\n  date: Date | null = null;\n  city: string = '';\n  venue: string = '';\n\n  constructor(activity?: ActivityFormValues) {\n    if (activity) {\n      this.id = activity.id;\n      this.title = activity.title;\n      this.category = activity.category;\n      this.description = activity.description;\n      this.date = activity.date;\n      this.venue = activity.venue;\n      this.city = activity.city;\n    }\n  }\n}","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    photos?: Photo[];\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserActivity {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport {format} from 'date-fns';\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\nexport default class ActivityStore {\n    activityMap = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor() {\n        makeAutoObservable(this);\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityMap.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n        }\n    } \n\n    get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString())\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityMap.values()).sort((a, b) => \n            a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as {[key: string]: Activity[]})\n        )\n    }\n\n\n    loadActivities = async () => {\n        this.loadingInitial=true;\n        try {\n            const result = await agent.Activities.list(this.axiosParams);\n            result.data.forEach(activity => {\n                this.setActivity(activity)\n            })\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n            return activity;\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                this.setLoadingInitial(false);\n                return activity;\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityMap.get(id);\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user; \n        if (user) {\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\n        }\n        activity.date = new Date(activity.date!);\n        this.activityMap.set(activity.id, activity);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.username;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n        } catch (error) {\n            console.log(error);\n            \n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\n                    this.activityMap.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                } \n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityMap.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees = \n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityMap.set(this.selectedActivity!.id, this.selectedActivity!)\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityMap.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityMap.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n\n}\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    userActivities: UserActivity[] = [];\n    loadingActivities = false;\n\n\n    constructor() {\n        makeAutoObservable(this);\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {   \n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.profile = {...this.profile, ...profile as Profile};\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n    loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n        try {\n            const activities = await agent.Profiles.listActivities(username, predicate!);\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loadingActivities = false;\n            })\n        }\n    }\n\n}\n\n","import { makeAutoObservable, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            window.location.href = \"/activities\";\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        window.location.href = \"/\";\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            window.location.href = \"/activities\";\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user) this.user.image = image;\n    } \n    setDisplayName = (name: string) => {\n        if (this.user) this.user.displayName = name;\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token)\n                } else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n    \n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt);\n                    })\n                    this.comments = comments\n                });\n            })\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment)\n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try {\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\nexport default observer(function NavBar() {\n    const { userStore: { user, logout } } = useStore();\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} exact to='/' header>\n                    <img src='/assets/logo.png' alt='logo' style={{ marginRight: '10px' }} />\n                    Eventify\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\n                <Menu.Item>\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \n                                text='My Profile' icon='user' />\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react';\nimport { Reveal, Button } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({ profile }: Props) {\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    if (userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{ width: '100%' }}>\n                <Button \n                    fluid \n                    color='teal' \n                    content={profile.following ? 'Following' : 'Not following'} />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    basic\n                    color={profile.following ? 'red' : 'green'}\n                    content={profile.following ? 'Unfollow' : 'Follow'}\n                    loading={loading}\n                    onClick={(e) => handleFollow(e, profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileCard({profile}: Props) {\n    function truncate(str: string | undefined) {\n        if (str) {\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\n        }\n    }\n\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile} />\n\n        </Card>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { List, Image, Popup} from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n    attendees?: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 2\n    }\n    return (\n        <List horizontal>\n            {attendees?.map(attendee =>(\n                <Popup\n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                            <Image \n                                size='mini' \n                                circular src={attendee.image || '/assets/user.png'} \n                                bordered\n                                style={attendee.following ? styles : null}\n                            />                        \n                        </List.Item>\n                    }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                    </Popup.Content>\n                </Popup>\n            ))}\n            \n        </List>\n\n    );\n})","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport {format} from 'date-fns';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({ activity }: Props) {\n\n    return (\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled &&\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{marginBottom: 5}} size='tiny' circular src={activity.host?.image || '/assets/user.png'}/>\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button \n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    )\n}\n","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer(function ActivityList() {\n    const { activityStore } = useStore();\n    const { groupedActivities } = activityStore;\n\n    return (\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                    {activities.map(activity => (\n                        <ActivityListItem key={activity.id} activity={activity} />\n                    ))}\n                </Fragment>\n            ))}\n        </>\n\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer(function ActivityFilters() {\n    const {activityStore: {predicate, setPredicate}} = useStore();\n    return (\n        <>\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item \n                    content='All Activites' \n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm going\" \n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm hosting\" \n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}    \n                />\n            </Menu>\n            <Header />\n            <Calendar \n                onChange={(date:Date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};","import { observer } from \"mobx-react-lite\";\nimport React, {useEffect, useState} from \"react\";\nimport { Grid, Loader } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityList from \"./ActivityList\";\nimport ActivityFilters from \"./ActivityFilters\";\nimport { PagingParams } from \"../../../app/models/pagination\";\nimport InfiniteScroll from 'react-infinite-scroller';\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\n\n\nexport default  observer(function ActivityDashboard(){\n    const {activityStore} = useStore();\n    const {loadActivities, activityMap, setPagingParams, pagination} = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\n        loadActivities().then(() => setLoadingNext(false));\n    }\n    \n    useEffect(() => {\n        if (activityMap.size <= 1) loadActivities();\n      }, [activityMap.size, loadActivities])\n  \n  \n\n    return(\n        <Grid>\n            <Grid.Column width='10'>\n            {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceholder />\n                        <ActivityListItemPlaceholder />\n                    </>\n                ) : (\n                        <InfiniteScroll\n                            pageStart={0}\n                            loadMore={handleGetNext}\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                            initialLoad={false}\n                        >\n                            <ActivityList />\n                        </InfiniteScroll>\n                    )}\n                \n            </Grid.Column>\n            <Grid.Column width='6'>\n               <ActivityFilters/>\n            </Grid.Column>\n            <Grid.Column width='10'>\n                <Loader active={loadingNext}/>\n            </Grid.Column>\n        </Grid>\n    );\n});","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name); \n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label style={{marginTop: \"5px\"}} basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import React from 'react';\nimport { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function LoginForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \n                setErrors({error: 'Invalid email or password'}))}\n        >\n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Eventify' color='teal' textAlign='center' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage \n                        name='error' render={() => \n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n\n                </Form>\n            )}\n        </Formik>\n    )\n})","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nexport default observer(function RegisterForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \n                setErrors({error}))}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up to Eventify' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='username' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage \n                        name='error' render={() => \n                        <ValidationErrors errors={errors.error}/>}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting} \n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage() {\n    const { userStore, modalStore } = useStore();\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\n                    Eventify\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to Eventify' />\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Go to Activities!\n                        </Button>\n                    </>\n\n                ) : (\n                        <>\n                            \n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                                Login\n                        </Button>\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                                Register\n                        </Button>\n                        </>\n\n                    )}\n            </Container>\n        </Segment>\n    )\n})\n","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name); \n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label style={{marginTop: \"5px\"}} basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'},\n]","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name); \n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select \n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label style={{marginTop: \"5px\"}} basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}\n","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!); \n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker \n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null }\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label style={{marginTop: \"5px\"}} basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate, Link } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid } from 'uuid';\nimport { Formik, Form} from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { ActivityFormValues } from '../../../app/models/activity';\nexport default observer(function ActivityForm() {\n    const navigate = useNavigate();\n    const {activityStore} = useStore();\n    const {createActivity, updateActivity, \n            loadActivity,\n            loadingInitial} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required('Category is required'),\n        date: Yup.string().required('Date is required').nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required(),\n    })\n\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\n    }, [id, loadActivity]);\n\n    function handleFormSubmit(activity: ActivityFormValues) {\n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            };\n            createActivity(newActivity).then(() => navigate(`/activities/${newActivity.id}`))\n        } else {\n            updateActivity(activity).then(() => navigate(`/activities/${activity.id}`))\n        }\n    }\n\n\n    \n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\n\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal' />\n\n            <Formik\n                validationSchema={validationSchema}\n                initialValues={activity} \n                enableReinitialize\n                onSubmit={values => handleFormSubmit(values)}\n            >\n                {({isValid, isSubmitting, dirty, handleSubmit}) =>(\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <MyTextInput placeholder='Title' name='title'  />\n                    <MyTextArea rows={3} placeholder='Description'name='description' />\n                    <MySelectInput options={categoryOptions} placeholder='Category'  name='category' />\n                    <MyDateInput \n                            placeholderText='Date'  \n                            name='date' \n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                    />\n                    <Header content='Location Details' sub color='teal' />\n                    <MyTextInput placeholder='City' name='city' />\n                    <MyTextInput placeholder='Venue'  name='venue' />\n                    <Button l\n                        disabled={isSubmitting || !dirty || !isValid}\n                        loading={isSubmitting} floated='right' \n                        positive type='submit' content='Submit' />\n                    <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\n                </Form>\n                )}\n            </Formik>\n        \n    </Segment>\n    )\n})","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns'\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, { resetForm }) =>\n                        commentStore.addComment(values).then(() => resetForm())}\n                    initialValues={{ body: '' }}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                >\n                    {({ isSubmitting, isValid, handleSubmit }) => (\n                        <Form className='ui form'>\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{ position: 'relative' }}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return;\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                                    {comment.displayName}\n                                </Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\nimport {format} from 'date-fns';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <span>\n                        {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                        </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}:Props) {\n    if(!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person': 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee=> (\n                        <Item \n                            key={attendee.username}\n                            style={{ position: 'relative' }}>\n                            {attendee.username === host?.username &&\n                            <Label\n                                style={{ position: 'absolute' }}\n                                color='orange'\n                                ribbon='right'\n                            >\n                                Host\n                            </Label>}\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                            </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns';\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n            {activity.isCancelled &&\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\n                        ribbon color='red' content='Cancelled' />\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n            {activity.isHost ? (\n                    <>\n                        <Button\n                            color={activity.isCancelled ? 'green' : 'red'}\n                            floated='left'\n                            basic\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}\n                        />\n                        <Button as={Link}\n                            disabled={activity.isCancelled}\n                            to={`/manage/${activity.id}`}\n                            color='orange'\n                            floated='right'>\n                            Manage Event\n                        </Button>\n                    </>\n\n                ) : activity.isGoing ? (\n                    <Button \n                        loading={loading} \n                        onClick={updateAttendance}\n                    >\n                        Cancel attendance\n                    </Button>\n                ) : (\n                    <Button\n                        disabled={activity.isCancelled}\n                        loading={loading} \n                        onClick={updateAttendance} \n                        color='teal'\n                    >\n                        Join Activity\n                    </Button>\n                )}\n            </Segment>\n        </Segment.Group>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, {useEffect} from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\nimport ActivityDetailedHeader from './ActivityDetaledHeader';\n\nexport default observer(function ActivityDetails() {\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, loadActivity,\n          loadingInitial, clearSelectedActivity} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if (id) loadActivity(id);\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity]);\n\n    if (loadingInitial || !activity) return <LoadingComponent />;\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity} />\n                <ActivityDetailedInfo  activity={activity} />\n                <ActivityDetailedChat activityId={activity.id}/>\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar activity={activity} />\n            </Grid.Column>\n        </Grid>\n    )\n})","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors &&\n                <ValidationErrors errors={errors} />\n            }\n        </>\n    )\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function ServerError() {\n    const {commonStore} = useStore();\n    console.log(commonStore.error?.details);\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal' />\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>\n                \n            }\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\n    return (\n        <Cropper \n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive = {\n        borderColor: 'green'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\n            <input {...getInputProps()} />  \n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { Button, Grid, Header } from 'semantic-ui-react';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}:Props) {\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n                \n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {files && files.length > 0 &&\n                    <>\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\n                        <Button.Group widths={2}>\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                        </Button.Group>\n                    </>}\n\n            </Grid.Column>\n        </Grid>\n    )\n}","import React, { SyntheticEvent, useState } from 'react';\nimport { observer } from 'mobx-react-lite';\n\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfilePhotos({ profile }: Props) {\n    const { profileStore: { isCurrentUser, uploadPhoto, \n            uploading, loading, setMainPhoto, deletePhoto}} = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n    return(\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && (\n                        <Button floated='right' basic\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget \n                                        uploadPhoto={handlePhotoUpload} \n                                        loading={uploading} \n                        />\n                    ) : (\n                        <Card.Group itemsPerRow={5}>\n                        {profile.photos?.map(photo => (\n                            <Card key={photo.id}>\n                                <Image src={photo.url} />\n                                {isCurrentUser && (\n                                    <Button.Group fluid widths={2}>\n                                        <Button \n                                            basic\n                                            color='green'\n                                            content='Main'\n                                            name={'main' + photo.id}\n                                            disabled={photo.isMain}\n                                            loading={target === 'main' + photo.id && loading}\n                                            onClick={e => handleSetMainPhoto(photo, e)}\n                                        />\n                                        <Button \n                                            basic \n                                            color='red' \n                                            icon='trash' \n                                            loading={target === photo.id && loading}\n                                            onClick={e => handleDeletePhoto(photo, e)}\n                                            disabled={photo.isMain}\n                                            name={photo.id}\n                                        />\n                                    </Button.Group>\n                                )}\n                            </Card>\n                        ))}\n                    </Card.Group>\n                    )}\n                </Grid.Column>\n            </Grid>\n            \n        </Tab.Pane>\n\n    );\n})","import { Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { Button } from \"semantic-ui-react\";\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\nimport * as Yup from 'yup';\ninterface Props {\n    setEditMode: (editMode: boolean) => void;\n}\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\n    const {profileStore: {profile, updateProfile}} = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\n            onSubmit={values => {\n                updateProfile(values).then(() => {\n                    setEditMode(false);}) \n            }}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required()\n            })} \n        >\n            {({isSubmitting, isValid, dirty}) => (\n                <Form className='ui form'>\n                    <MyTextInput placeholder='Display Name'\n                                 name='displayName' />\n                    <MyTextArea  rows={3} \n                                 placeholder='Add your bio'\n                                 name='bio' />\n                    <Button positive\n                            type='submit'\n                            loading={isSubmitting}\n                            content='Update profile'\n                            floated='right'\n                            disabled={!isValid || !dirty}\n                     />\n                </Form>\n            )} \n        </Formik>\n    );\n})\n","import React, {useState} from 'react';\nimport {useStore} from \"../../app/stores/store\";\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\nimport ProfileEditForm from \"./ProfileEditForm\";\nimport { observer } from 'mobx-react-lite';\nexport default observer(function ProfileAbout() {\n    const {profileStore} = useStore();\n    const {isCurrentUser, profile} = profileStore;\n    const [editMode, setEditMode] = useState(false);\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\n                    {isCurrentUser && (\n                        <Button\n                            floated='right'\n                            basic\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\n                            onClick={() => setEditMode(!editMode)}\n                        /> )}\n                </Grid.Column>\n                <Grid.Column width='16'>\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\n                    <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\n                </Grid.Column>\n        </Grid>\n    </Tab.Pane>\n)\n})\n","import React from 'react';\nimport {Tab, Grid, Header, Card} from \"semantic-ui-react\";\nimport ProfileCard from \"./ProfileCard\";\nimport {useStore} from \"../../app/stores/store\";\nimport { observer } from 'mobx-react-lite';\n\nexport default observer(function ProfileFollowings() {\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header\n                        floated='left'\n                        icon='user'\n                        content={activeTab === 3 ? `People following ${profile!.displayName}` : `People ${profile?.displayName} is following`}\n                    />\n                </Grid.Column>\n                <Grid.Column width='16'>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})\n","import React, { SyntheticEvent, useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps, Placeholder } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { UserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { useStore } from \"../../app/stores/store\";\n\nconst panes = [\n    { menuItem: 'Future Events', pane: { key: 'future' } },\n    { menuItem: 'Past Events', pane: { key: 'past' } },\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\n];\n\nexport default observer(function ProfileActivities() {\n    const { profileStore } = useStore();\n    const {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities\n    } = profileStore;\n\n    useEffect(() => {\n        loadUserActivities(profile!.username);\n    }, [loadUserActivities, profile]);\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\n    };\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content={'Events'} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={panes}\n                        menu={{ secondary: true, pointing: true }}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: UserActivity) => (\n                            <Card\n                                as={Link}\n                                to={`/activities/${activity.id}`}\n                                key={activity.id}\n                            >\n                                {loadingActivities ? (\n                                    <Placeholder>\n                                        <Placeholder.Image />\n                                    </Placeholder>\n                                ):(\n                                    <Image\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\n                                    />\n                                )}\n                                \n                                <Card.Content>\n                                    {loadingActivities ? (\n                                        <Placeholder>\n                                        <Placeholder.Header textAlign='center'>\n                                          <Placeholder.Line length='medium' />\n                                        </Placeholder.Header>\n                                        <Placeholder.Paragraph textAlign='center'>\n                                          <Placeholder.Line length='very short' />\n                                          <Placeholder.Line length='very short' />\n                                        </Placeholder.Paragraph>\n                                      </Placeholder>\n                                    ):(\n                                        <>\n                                            <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                                            <Card.Meta textAlign='center'>\n                                                <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                                <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                            </Card.Meta>\n                                        </>\n                                       \n                                    )}\n                                    \n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n});","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport ProfilePhotos from './ProfilePhotos';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileFollowings from './ProfileFollowings';\nimport { useStore } from '../../app/stores/store';\nimport ProfileActivities from './ProfileActivities';\n\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileContent({profile}:Props) {\n    const {profileStore} = useStore();\n\n    const panes = [\n        {menuItem: 'About', render: () => <ProfileAbout />},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile}/>},\n        {menuItem: 'Events', render: () => <ProfileActivities/>},\n        {menuItem: 'Followers', render: () => <ProfileFollowings/>},\n        {menuItem: 'Following', render: () => <ProfileFollowings/>},\n    ];\n    return(\n        <Tab \n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n\n        />\n    );\n})\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileHeader({profile}:Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n                   <FollowButton profile={profile}/>\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\nimport { useStore } from '../../app/stores/store';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from './ProfileHeader';\n\nexport default observer(function ProfilePage() {\n    const { username } = useParams<{ username: string }>();\n    const { profileStore } = useStore();\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\n\n    useEffect(() => {\n        loadProfile(username!);\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username, setActiveTab])\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile} />\n                        <ProfileContent profile={profile} />\n                    </>}\n            </Grid.Column>\n        </Grid>\n    )\n})","import { Navigate, Outlet } from \"react-router-dom\";\n\ninterface Props {\n    isLoggedIn: boolean;\n    redirectPath?: string ;\n    children?: React.ReactElement | null;\n}\n\nexport default function PrivateRoute({\n    isLoggedIn,\n    redirectPath = '/',\n    children,\n  }:Props) {\n    if(!isLoggedIn) {\n        return <Navigate to={redirectPath} replace/>;\n    }\n    return children ? children : <Outlet/>;\n}\n","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport HomePage from '../../features/home/HomePage';\nimport { Routes, Route, useLocation } from \"react-router-dom\";\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestErrors';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n  const {isLoggedIn} = userStore;\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  function renderActivitiesDashboard(){\n    return (\n      <>\n            <NavBar />\n            <Container  style={{marginTop: '7em'}}>\n            <ActivityDashboard/>\n            </Container>\n          </>\n    );\n  }\n  function renderActivityDetails(){\n    return (\n      <>\n            <NavBar />\n            <Container  style={{marginTop: '7em'}}>\n            <ActivityDetails/>\n            </Container>\n          </>\n    );\n  }\n\n  function renderActivityForm(){\n    return (\n      <>\n            <NavBar />\n            <Container  style={{marginTop: '7em'}}>\n            <ActivityForm key={location.key}/>\n            </Container>\n          </>\n    );\n  }\n  function renderProfilePage(){\n    return (\n      <>\n            <NavBar />\n            <Container  style={{marginTop: '7em'}}>\n            <ProfilePage/>\n            </Container>\n          </>\n    );\n  }\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n\n  return (\n    <>\n    \n        <ToastContainer position='top-right' hideProgressBar/>\n        <ModalContainer/>\n        <Routes>\n          <Route path='/' element={<HomePage/>}/>\n          <Route element={<PrivateRoute isLoggedIn={isLoggedIn}/>}>\n            <Route path='/activities' element={renderActivitiesDashboard()}/>\n            <Route path='/activities/:id' element={renderActivityDetails()}/>\n            <Route path='/createActivity' element={renderActivityForm()}/>\n            <Route path='/manage/:id' element={renderActivityForm()}/>\n            <Route path='/errors' element={<TestErrors/>} />\n            <Route path='/profiles/:username' element={renderProfilePage()} />\n          </Route>\n          <Route path=\"*\" element={<NotFound/>}/>\n          <Route path=\"/server-error\" element={<ServerError/>}/>\n        </Routes>\n         \n        \n        \n    </>\n  );\n}\n\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport {StoreContext, store} from './app/stores/store';\nimport { BrowserRouter } from 'react-router-dom';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <BrowserRouter>\n      <ScrollToTop/>\n      <App />\n    </BrowserRouter>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}